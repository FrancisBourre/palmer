/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.bourre.ioc.parser.factory {	import com.bourre.collections.ArrayIterator;	import com.bourre.collections.Iterator;	import com.bourre.exceptions.UnimplementedMethodException;	import com.bourre.ioc.parser.ParserCollection;	import com.bourre.ioc.parser.factory.ASPreProcessorParser;	import com.bourre.ioc.parser.factory.ParserCommand;	import com.bourre.log.PalmerDebug;	import com.bourre.log.PalmerStringifier;	/**	 * Abstract implementation for IoC parsers collection.	 * 	 * @author Romain Ecarnot	 */	public class AbstractParserCollection implements ParserCollection	{		//--------------------------------------------------------------------		// Private properties		//--------------------------------------------------------------------		private var _oAsProcessor : ASPreProcessorParser;				//--------------------------------------------------------------------		// Protected properties		//--------------------------------------------------------------------		protected var oCollection : Vector.<ParserCommand>;				//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * @inheritDoc		 */		public function addParserBefore( searchParser : ParserCommand, parser : ParserCommand ) : Boolean		{			var index : int = oCollection.indexOf( searchParser ) ;			if( parser == null && index != -1) return false;						return addCommandAt( index, parser ) ;		}				/**		 * @inheritDoc		 */		public function addParserAfter( searchParser : ParserCommand, parser : ParserCommand ) : Boolean		{			var index : int = oCollection.indexOf( searchParser ) ;			if( parser == null && index != -1) return false;						return addCommandAt( index + 1, parser ) ;		}				/**		 * @inheritDoc		 */		public function addParserStart( parser : ParserCommand ) : Boolean		{			return addCommandAt( 0, parser ) ;		}				/**		 * @inheritDoc		 */		public function addParserEnd( parser : ParserCommand ) : Boolean		{			return addCommandAt( oCollection.length, parser ) ;		}				/**		 * @inheritDoc		 */		public function removeParser( parser : ParserCommand ) : Boolean		{			var id : int = oCollection.indexOf( parser ); 			if ( id == -1 ) return false;			while ( ( id = oCollection.indexOf( parser ) ) != -1 ) oCollection.splice( id, 1 );			return true;		}				/**		 * 		 */		public function getASPreProcessor( ) : ASPreProcessorParser		{			return _oAsProcessor;		}				/**		 * Returns an Iterator throw all collections parser command.		 */		public function iterator( ) : Iterator		{			var a : Array = new Array();			var l : uint = oCollection.length;			for( var i : uint = 0; i < l; i++ ) a.push( oCollection[i]);			return new ArrayIterator( a );		}		/**		 * Returns string representation of instance.		 * 		 * @return The string representation of instance.		 */		public function toString() : String		{			return PalmerStringifier.stringify( this );		}						//--------------------------------------------------------------------		// Protected methods		//--------------------------------------------------------------------				/**		 * Adds passed-in command at index position in sequencer.		 * 		 * @param	index		Index for insertion (must be valid)		 * @param	command		Command to add		 * 		 * @return	<code>true</code> if <code>command</code> was successfully inserted.		 */		protected function addCommandAt( index : uint, command : ParserCommand ) : Boolean		{			var l : uint = oCollection.length;						if( command == null || index > l) return false;									oCollection.splice( index, 0, command );			return (l != oCollection.length );		}				/**		 * @private		 */		protected function setParserList( ) : void		{			var msg : String = this + ".setParserList() must be implemented in concrete class.";			PalmerDebug.ERROR( msg );			throw( new UnimplementedMethodException( msg ) );		}				//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------				/** @private */		public function AbstractParserCollection( )		{			_oAsProcessor = new ASPreProcessorParser( );						oCollection = new Vector.<ParserCommand>( );							setParserList( );		}			}}				