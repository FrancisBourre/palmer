/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */	 package com.bourre.utils {	/**	 * The NetUtil utility class is an all-static class with methods for 	 * working with URL String.	 * 	 * @author Romain Ecarnot	 */	final public class NetUtil 	{		//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 *  Returns the domain information from the specified URL.		 *  		 *  @param url The URL to analyze.		 *  @return The server name and port of the specified URL.		 */		public static function getFullServerName( url : String ) : String		{			var start : int;			var length : int;						if( getProtocol( url ).length > 0 )			{				start = getProtocol( url ).length + "://".length;			}			else			{				start = 0;			}						length = url.indexOf( "/", start );						return length == -1 ? url.substr( start ) : url.substring( start, length );		}				/**		 * 		 */		public static function getServerName( url : String ) : String		{			var name : String = getFullServerName(url);			var index : int = name.indexOf( ":" );						if( index > -1 ) return name.substring( 0, index );			else return name;		}				/**		 * Returns used protocol in passed-in <code>url</code>.		 */		public static function getProtocol( url : String ) : String		{			var index : int = url.indexOf( "://" );						if( index > -1 ) return url.substring( 0, index );						return "";		}				/**		 * 		 */		public static function replaceProtocole( url : String, protocol : String ) : String		{			if( getProtocol( url ).length > 0 )			{				return url.replace( getProtocol( url ), protocol );			}			else return protocol + "://" + url;		}				/**		 * 		 */		public static function getPort( url : String ) : int		{			var name : String = getFullServerName( url );			var index : int = name.indexOf( ":" );			var port : int = -1;						if( index > -1 )			{				port = parseInt( name.substring( index + 1 ) ); 				if (!isNaN( port )) return port;			}						return port;		}				/**		 * 		 */		public static function isHTTP( url : String, secured : Boolean = false ) : Boolean		{			if( secured ) return getProtocol(url) == "https";			else			{				return getProtocol(url) == "http" || getProtocol(url) == "https";			}		}					//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------						/**		 * @private		 */		function NetUtil(  ) 		{ 			}	}}