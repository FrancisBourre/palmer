/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package net.pixlib.load{	import net.pixlib.core.AbstractLocator;	import net.pixlib.core.LocatorEvent;	import net.pixlib.exceptions.NoSuchElementException;	import net.pixlib.exceptions.PrivateConstructorException;	import net.pixlib.load.SoundLoader;		use namespace palmer_GraphicLoader;		use namespace palmer_FileLoader;		use namespace palmer_StreamLoader;		use namespace palmer_XMLLoader;		use namespace palmer_VideoLoader;		use namespace palmer_SoundLoader;		use namespace palmer_CSSLoader;	/**	 *  Dispatched when loader is registered in 	 *  <code>LoaderLocator</code> locator.	 *  	 *  @eventType net.pixlib.load.LoaderLocatorEvent.onRegisterLoaderEVENT	 */	[Event(name="onRegisterLoader", type="net.pixlib.load.LoaderLocatorEvent")]	/**	 *  Dispatched when loader is unregistered from 	 *  <code>LoaderLocator</code> locator.	 *  	 *  @eventType net.pixlib.load.LoaderLocatorEvent.onUnregisterLoaderEVENT	 */	[Event(name="onUnregisterLoader", type="net.pixlib.load.LoaderLocatorEvent")]	/**	 * The LoaderLoacator store and register <code>Loader</code> objects.	 * 	 * @example 	 * <pre class="prettyprint">	 * 	 * public function loadFile( ) : void	 * {	 * 	var loader : GraphicLoader = new GraphicLoader( );	 * 	loader.setName( "MyLogo" );	 * 	loader.load( new URLRequest( "logo.jpg" ) );	 * }	 * 	 * public function genericAccess( ) : void	 * {	 * 	var loader : Loader = LoaderLocator.getInstance().getLoader( "myLogo" );	 * }	 * 	 * public function typedAccess( ) :void	 * {	 * 	var logo : DisplayObject = LoaderLocator.getInstance().lowra_GraphicLoader::getLoader( "MyLogo" ).getView();	 * }	 * </pre>	 * 	 * @author 	Romain Ecarnot	 * 	 * @see Loader	 */	public class LoaderLocator extends AbstractLocator	{		//--------------------------------------------------------------------		// Private properties		//--------------------------------------------------------------------				private static var _oI : LoaderLocator = null;				//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Returns unique <code>LoaderLocator</code>.		 * 		 * @return the unique <code>LoaderLocator</code>.		 */				public static function getInstance() : LoaderLocator		{			if ( !(LoaderLocator._oI is LoaderLocator) )			{				LoaderLocator._oI = new LoaderLocator( ConstructorAccess.instance );			}						return LoaderLocator._oI;		}				/**		 * Releases instance.		 */		public static function release() : void		{			if ( LoaderLocator._oI is LoaderLocator ) LoaderLocator._oI = null;		}		/**		 * Returns <code>Loader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>Loader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	<code>Error</code> — name is not registered in current 		 * 			locator		 */		public function getLoader( name : String ) : Loader		{			try			{				var o : Loader = locate( name ) as Loader;				return o;			} 			catch ( e : Error )			{				var msg : String = this + ".getLoader() " + e.message;				getLogger( ).error( msg );				throw( new NoSuchElementException( msg ) );			}						return null;		}		/**		 * Takes values in Locator and pass them one by one as arguments		 * to a method of an object.		 * 		 * @example		 * <pre class="prettyprint">		 * 		 * function changeAlpha( mc : GraphicLoader, a : Number, s : Number )		 * {		 *      var mc : DisplayObject = mc.getView();		 *      mc.alpha = a;		 * }		 * 		 * myLocator.lowra_GraphicLoader::batch( changeAlpha, true, 0.5 );		 * </pre>		 *		 * @param	type		Loader type filter.		 * @param	f			function to execute on each value stored in the locator.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 */		public function batchOnLoader( type : Class, f : Function, useContent : Boolean = false, ...args ) : void		{			super.batch.apply( this, getArguments( [ getLoaderCollectionByClass( type, useContent ), f ], args ) );		}				/**		 * Takes values in Locator and call on each value the method name		 * passed as 1st argument.		 *		 * @param	type		Loader type filter.		 * @param	methodName	method name to call on each value stored in the locator.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 */		public function callOnLoader( type : Class, methodName : String, useContent : Boolean = false, ...args ) : void		{			super.call.apply( this, getArguments( [ getLoaderCollectionByClass( type, useContent ), methodName ], args ) );		}				/**		 * Returns a collection of all loaders.		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <pre class="prettyprint">		 * 		 * var list : Array = LoaderLocator.getInstance().getLoaderCollection();		 * </pre>		 */		public function getLoaderCollection( type : Class = null, useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass( type, useContent );		}						/* GraphicLoader namespace */				/**		 * Returns <code>GraphicLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>GraphicLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	<code>Error</code> — name is not registered in current 		 * 			locator		 */		palmer_GraphicLoader function getLoader( name : String ) : GraphicLoader		{			return GraphicLoader( getLoader( name ) );		}				/**		 * Returns a collection of GraphicLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <pre class="prettyprint">		 * 		 * var list : Array = LoaderLocator.getInstance().lowra_GraphicLoader::getLoaderCollection();		 * </pre>		 */		palmer_GraphicLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass( GraphicLoader, useContent );		}				/**		 * Applies a batch process only on GraphicLoader loaders.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 */		palmer_GraphicLoader function batch( f : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply( this, getArguments( [ GraphicLoader, f, useContent ], args ) );		}		/**		 * Calls the call() method only on GraphicLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 */		palmer_GraphicLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply( this, getArguments( [ GraphicLoader, methodName, useContent ], args ) );		}						/* FileLoader namespace */				/**		 * Returns <code>FileLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>FileLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	<code>Error</code> — name is not registered in current 		 * 			locator		 */		palmer_FileLoader function getLoader( name : String ) : FileLoader		{			return FileLoader( getLoader( name ) );		}		/**		 * Returns a collection of FileLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <pre class="prettyprint">		 * 		 * var list : Array = LoaderLocator.getInstance().palmer_FileLoader::getLoaderCollection();		 * </pre>		 */		palmer_FileLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass( FileLoader, useContent );		}		/**		 * Applies a batch process only on FileLoader loaders.		 * 		 * @param	f			function to execute on each value stored.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 */		palmer_FileLoader function batch( f : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply( this, getArguments( [ FileLoader, f, useContent ], args ) );		}		/**		 * Calls the call() method only on FileLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 */		palmer_FileLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply( this, getArguments( [ FileLoader, methodName, useContent ], args ) );		}						/* XMLLoader namespace */				/**		 * Returns <code>XMLLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>XMLLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	<code>Error</code> — name is not registered in current 		 * 			locator		 */		palmer_XMLLoader function getLoader( name : String ) : XMLLoader		{			return XMLLoader( getLoader( name ) );		}		/**		 * Returns a collection of XMLLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <pre class="prettyprint">		 * 		 * var list : Array = LoaderLocator.getInstance().palmer_XMLLoader::getLoaderCollection();		 * </pre>		 */		palmer_XMLLoader function getLoaderCollection( useContent : Boolean ) : Array		{			return getLoaderCollectionByClass( XMLLoader, useContent );		}		/**		 * Applies a batch process only on XMLLoader loaders.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 */		palmer_XMLLoader function batch( f : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply( this, getArguments( [ XMLLoader, f, useContent ], args ) );		}		/**		 * Calls the call() method only on XMLLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 */		palmer_XMLLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply( this, getArguments( [ XMLLoader, methodName, useContent ], args ) );		}						/* StreamLoader namespace */				/**		 * Returns <code>StreamLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>StreamLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	<code>Error</code> — name is not registered in current 		 * 			locator		 */		palmer_StreamLoader function getLoader( name : String ) : StreamLoader		{			return StreamLoader( getLoader( name ) );		}		/**		 * Returns a collection of StreamLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <pre class="prettyprint">		 * 		 * var list : Array = LoaderLocator.getInstance().palmer_StreamLoader::getLoaderCollection();		 * </pre>		 */		palmer_StreamLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass( StreamLoader, useContent );		}		/**		 * Applies a batch process only on StreamLoader loaders.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 */		palmer_StreamLoader function batch( f : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply( this, getArguments( [ StreamLoader, f, useContent ], args ) );		}		/**		 * Calls the call() method only on StreamLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 */		palmer_StreamLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply( this, getArguments( [ StreamLoader, methodName, useContent ], args ) );		}						/* VideoLoader namespace */				/**		 * Returns <code>VideoLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>VideoLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	<code>Error</code> — name is not registered in current 		 * 			locator		 */		palmer_VideoLoader function getLoader( name : String ) : VideoLoader		{			return VideoLoader( getLoader( name ) );		}		/**		 * Returns a collection of VideoLoader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <pre class="prettyprint">		 * 		 * var list : Array = LoaderLocator.getInstance().palmer_VideoLoader::getLoaderCollection();		 * </pre>		 */		palmer_VideoLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass( VideoLoader, useContent );		}		/**		 * Applies a batch process only on VideoLoader.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 */		palmer_VideoLoader function batch( f : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply( this, getArguments( [ VideoLoader, f, useContent ], args ) );		}		/**		 * Calls the call() method only on VideoLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 */		palmer_VideoLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply( this, getArguments( [ VideoLoader, methodName, useContent ], args ) );		}						/* SoundLoader namespace */				/**		 * Returns <code>SoundLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>SoundLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	<code>Error</code> — name is not registered in current 		 * 			locator		 */		palmer_SoundLoader function getLoader( name : String ) : SoundLoader		{			return SoundLoader( getLoader( name ) );		}		/**		 * Returns a collection of SoundLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <pre class="prettyprint">		 * 		 * var list : Array = LoaderLocator.getInstance().palmer_SoundLoader::getLoaderCollection();		 * </pre>		 */		palmer_SoundLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass( SoundLoader, useContent );		}				/**		 * Applies a batch process only on SoundLoader loaders.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 */		palmer_SoundLoader function batch( f : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply( this, getArguments( [ SoundLoader, f, useContent ], args ) );		}				/**		 * Calls the call() method only on SoundLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 */		palmer_SoundLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply( this, getArguments( [ SoundLoader, methodName, useContent ], args ) );		}				/* CSSLoader namespace */				/**		 * Returns <code>CSSLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>CSSLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	<code>Error</code> — name is not registered in current 		 * 			locator		 */		palmer_CSSLoader function getLoader( name : String ) : CSSLoader		{			return CSSLoader( getLoader( name ) );		}		/**		 * Returns a collection of CSSLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <pre class="prettyprint">		 * 		 * var list : Array = LoaderLocator.getInstance().palmer_CSSLoader::getLoaderCollection();		 * </pre>		 */		palmer_CSSLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass( CSSLoader, useContent );		}				/**		 * Applies a batch process only on CSSLoader loaders.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 */		palmer_CSSLoader function batch( f : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply( this, getArguments( [ CSSLoader, f, useContent ], args ) );		}				/**		 * Calls the call() method only on CSSLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 */		palmer_CSSLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply( this, getArguments( [ CSSLoader, methodName, useContent ], args ) );		}						//--------------------------------------------------------------------		// Protected methods		//--------------------------------------------------------------------				/**		 * Returns a collection of registered loader depending of passed-in 		 * value <code>type</code>.		 * 		 * @param	type		Class type filter		 * @param	useContent	Use loader content or loader instance		 */		protected function getLoaderCollectionByClass( type : Class = null, useContent : Boolean = false ) : Array		{			var a : Array = new Array( );			var val : Object;						if( type == null ) type = Loader;						for each (var value : Loader in getValues( ) )			{				val = useContent ? value.getContent( ) : value;								if( type != null )				{					if( value is type ) a.push( val );				}			}						return a;		}				final protected function getArguments( required : Array, optional : Array ) : Array		{			return ( optional.length > 0 ) ? required.concat( optional ) : required;		}				/**		 * @inheritDoc		 */		override protected function getLocatorEvent( type : String, name : String = null, o : Object = null ) : LocatorEvent		{			return new LoaderLocatorEvent( type, this, name, o as Loader );		}				//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------				/** private */		function LoaderLocator( access : ConstructorAccess )		{			super( Loader, null );						if ( !(access is ConstructorAccess) ) throw new PrivateConstructorException( );		}	}}internal class ConstructorAccess {	static public const instance : ConstructorAccess = new ConstructorAccess( );}