/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package net.pixlib.display {	import net.pixlib.core.AbstractLocator;	import net.pixlib.exceptions.PrivateConstructorException;	import flash.display.Shader;	/**	 * The <code>Shader</code> locator.	 * 	 * @author Romain Ecarnot	 */	final public class ShaderLocator extends AbstractLocator	{		//--------------------------------------------------------------------		// Private properties		//--------------------------------------------------------------------		private static  var _oI : ShaderLocator ;						//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Returns singleton instance of <code>ShaderLocator</code> class.		 * 		 * @return The singleton instance of <code>ShaderLocator</code> class.		 */			public static function getInstance() : ShaderLocator		{			if ( !(ShaderLocator._oI is ShaderLocator) ) ShaderLocator._oI = new ShaderLocator( ConstructorAccess.instance );			return ShaderLocator._oI;		}				/**		 * Releases singleton instance.		 */		public static function release() : void		{			if ( ShaderLocator._oI is ShaderLocator ) ShaderLocator._oI = null;		}		/**		 * Returns Shader object registered with passed-in <code>name</code>.		 */		public function getShader( name : String ) : Shader		{			return locate( name ) as Shader;		}				//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------							/**		 * @private		 */		function ShaderLocator( access : ConstructorAccess )		{			super( Shader, null, null );						if ( !(access is ConstructorAccess) ) throw new PrivateConstructorException( );		}	}}internal class ConstructorAccess {	static public const instance : ConstructorAccess = new ConstructorAccess( );}