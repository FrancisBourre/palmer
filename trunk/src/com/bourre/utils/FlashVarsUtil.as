/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.bourre.utils {	import com.bourre.core.CoreFactory;	import com.bourre.exceptions.PrivateConstructorException;	

	/**	 * FlashVars helper.	 * 	 * @author Romain Ecarnot	 */	public class FlashVarsUtil 	{		//--------------------------------------------------------------------		// Constants		//--------------------------------------------------------------------				/** Flashvars name prefix for <strong>CoreFactory</strong> registration. */		public static const FLASHVARS_PREFIX : String = "flashvars::";		
		
		//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Returns Flashvars registred with passed-in <code>name</code>.		 * 		 * @param	name	Name of Flashvars to retreive		 */		public static function get( name : String ) : String		{			if( CoreFactory.getInstance( ).isRegistered( FLASHVARS_PREFIX + name ) )			{				return CoreFactory.getInstance( ).locate( FLASHVARS_PREFIX + name ).toString( );			}			else return null;		}				/**		 * Registers new Flashvars pair into bean factory.		 */		public static function set( name : String, value : Object, overwrite : Boolean = false ) : String		{			var factory : CoreFactory = CoreFactory.getInstance();						if( !factory.isRegistered( FLASHVARS_PREFIX + name ) )			{				if( !factory.isBeanRegistered( value ) )				{					factory.register( FLASHVARS_PREFIX + name, value );					return name;	
				}				else return factory.getKey( value ).substring( FLASHVARS_PREFIX.length );			}			else if( overwrite )			{				factory.unregister( FLASHVARS_PREFIX + name );								if( !factory.isBeanRegistered( value ) )				{					factory.register( FLASHVARS_PREFIX + name, value );					return name;					}				else return factory.getKey( value ).substring( FLASHVARS_PREFIX.length );			}						return null;		}						//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------				/**		 * @private		 */		function FlashVarsUtil( access : PrivateConstructorAccess )		{			if ( !(access is PrivateConstructorAccess) ) throw new PrivateConstructorException();		}	}}
internal class PrivateConstructorAccess 
{
}