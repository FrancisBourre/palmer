/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.bourre.ioc.parser.factory {	import com.bourre.ioc.parser.ParserCollection;	import com.bourre.collections.ArrayIterator;	import com.bourre.collections.Iterator;	import com.bourre.exceptions.UnimplementedMethodException;	import com.bourre.ioc.parser.factory.ASPreProcessorParser;	import com.bourre.ioc.parser.factory.ParserCommand;	import com.bourre.log.PalmerDebug;	import com.bourre.log.PalmerStringifier;		public class AbstractParserCollection implements ParserCollection	{		//--------------------------------------------------------------------		// Private properties		//--------------------------------------------------------------------		private var _oAsProcessor : ASPreProcessorParser;				//--------------------------------------------------------------------		// Protected properties		//--------------------------------------------------------------------		protected var oCollection : Vector.<ParserCommand>;
				//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------		
		/**		 * 		 */		public function getASPreProcessor( ) : ASPreProcessorParser		{			return _oAsProcessor;		}				/**		 * 		 */		public function iterator( ) : Iterator		{			var a : Array = new Array();			var l : uint = oCollection.length;			for( var i : uint = 0; i < l; i++ ) a.push( oCollection[i]);			return new ArrayIterator( a );		}		/**		 * Returns string representation of instance.		 * 		 * @return The string representation of instance.		 */		public function toString() : String		{			return PalmerStringifier.stringify( this );		}						//--------------------------------------------------------------------		// Protected methods		//--------------------------------------------------------------------		protected function setParserList( ) : void		{			var msg : String = this + ".setParserList() must be implemented in concrete class.";			PalmerDebug.ERROR( msg );			throw( new UnimplementedMethodException( msg ) );		}				//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------				/** @private */		public function AbstractParserCollection( )		{			_oAsProcessor = new ASPreProcessorParser( );						oCollection = new Vector.<ParserCommand>( );							setParserList( );		}			}}				