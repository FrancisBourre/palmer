/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package net.pixlib.load {
	import net.pixlib.display.CSS;	import net.pixlib.encoding.CSSDeserializer;	import net.pixlib.load.FileLoader;	import flash.text.StyleSheet;	/**
	 * Dedicated Loader implementation for CSS files.	 * 	 * <p>Automatically register created <code>CSS</code> instance 	 * in global <code>CSSLocator</code> when loading is complete, 	 * using CSSLoader name ( if defined ).</p>	 * 	 * @example	 * <pre class="prettyprint">	 * 	 * var loader : CSSLoader = new CSSLoader( "MainCSS" );	 * loader.addEventListener( LoaderEvent.onLoadInitEVENT, onLoaded );	 * loader.load( new URLRequest( "styles.css" ) );	 * </pre>	 * 	 * @author Romain Ecarnot
	 */
	public class CSSLoader extends FileLoader	{		//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Creates new <code>CSS</code> instance.		 * 		 * <p>If <code>name</code> is not <code>null</code>, created CSS is 		 * registered into <code>CSSLocator</code> repository.</p>		 * 		 * @see CSSLocator		 */		public function CSSLoader( name : String = null )		{			super( FileLoader.TEXT );						if( name != null ) setName( name );		}			/**		 * Returns loaded CSS instance.		 */		public function getCSS(  ) : CSS		{			return getContent( ) as CSS;		}				/**		 * @inheritDoc		 */		override public function setContent( content : Object ) : void		{				if( content != null )			{				var deserializer : CSSDeserializer = new CSSDeserializer( );				var sheet : StyleSheet = deserializer.deserialize( content ) as StyleSheet;								super.setContent( new CSS( getName(), sheet ) );			}		}	}
}
