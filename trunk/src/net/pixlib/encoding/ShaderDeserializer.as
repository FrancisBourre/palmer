/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package net.pixlib.encoding {	import net.pixlib.display.ShaderLocator;	import net.pixlib.encoding.Deserializer;	import net.pixlib.exceptions.IllegalArgumentException;	import net.pixlib.log.PalmerDebug;	import net.pixlib.log.PalmerStringifier;	import flash.display.Shader;	import flash.utils.ByteArray;	/**	 * Shader deserializer.	 * 	 * <p>Automatically register created <code>Shader</code> instance 	 * in global <code>ShaderLocator</code> if possible</p>	 * 	 * @example Shader resource on IoC context	 * <pre class="prettyprint">	 * 	&lt;dll url="ShaderDeserializerDLL.swf" /&gt;	 * 	&lt;rsc id="shader" url="pixelate.pbj" type="binary" deserializer-class="net.pixlib.encoding.ShaderDeserializer" /&gt;	 * </pre>	 * 	 * @example Retreive shader and create filter	 * <pre class="prettyprint">	 * var shader : Shader = ShaderLocator.getInstance().getShader( "shader" );	 * //or	 * //var shader : Shader = CoreFactory.getInstance().locate( "shader" ) as Shader;	 * 	 * shader.data.dimension.value = [50];	 * var filter : ShaderFilter = new ShaderFilter(shader);	 * myMC.filters = [filter];	 * </pre>	 * 	 * @author Romain Ecarnot	 * 	 * @see Deserializer	 * @see	net.pixlib.display.ShaderLocator	 */	public class ShaderDeserializer implements Deserializer	{		//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Creates instance.		 */				public function ShaderDeserializer()		{					}				/**		 * @inheritDoc.		 * 		 * <p>Returns content is a <code>Shader</code> instance if deserialization 		 * process is success.</p>		 */		public function deserialize(serializedContent : Object, target : Object = null, key : String = null ) : Object		{			try			{				var ba : ByteArray = serializedContent as ByteArray;				var shader : Shader = new Shader( ba );								try				{					if( key != null ) 					{						ShaderLocator.getInstance().register( key, shader );					}				}				catch( e : Error )				{					PalmerDebug.ERROR( this + "::" + e.message );				}								return shader;			}			catch( e : Error )			{				throw( new IllegalArgumentException( this + ".deserialize() error. Content is not Shader compliant" ) );			}						return null;		}				/**		 * Returns string represenation.		 */
		public function toString() : String 		{			return PalmerStringifier.stringify( this );		}	}}