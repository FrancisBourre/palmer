/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package net.pixlib.ioc.parser.factory.xml {	import net.pixlib.exceptions.PrivateConstructorException;	import net.pixlib.ioc.core.ContextAttributeList;	import net.pixlib.ioc.core.ContextNameList;	import net.pixlib.log.PalmerDebug;	
	/**	 * The <code>ProcessingHelper</code> helper gives method for 	 * xml context content pre processing.	 * 	 * @see net.pixlib.ioc.load.runtime.RuntimeContextLoader	 * 	 * @author Romain Ecarnot	 */	public class ProcessingHelper 	{		//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				public static function changeObjectID( context : *, id : String, newID : String ) : XML		{			var xml : XML = ( context is XML ) ? context as XML : new XML( context );						var refList : XMLList = xml..*.( hasOwnProperty( getAttributeName( ContextAttributeList.REF ) ) && @[ContextAttributeList.REF] == id );						xml..*.( hasOwnProperty( getAttributeName( ContextAttributeList.ID ) ) && @[ContextAttributeList.ID] == id ).@[ContextAttributeList.ID] = newID;						for each (var node : XML in refList)			{				node.@[ContextAttributeList.REF] = newID;			}						return xml;		}				public static function changeObjectAttribute( context : *, id : String, attributeName : String, value : Object, b : Boolean = false ) : XML		{			var xml : XML = ( context is XML ) ? context as XML : new XML( context );						var result : XMLList = xml..*.( hasOwnProperty( getAttributeName( ContextAttributeList.ID ) ) && @[ContextAttributeList.ID] == id );						if( result.hasOwnProperty( getAttributeName( attributeName ) ) || b )			{				result.@[attributeName] = value.toString();			}						return xml;		}				public static function changePropertyValue(  context : *, id : String, name : String, value : Object ) : XML		{			var xml : XML = ( context is XML ) ? context as XML : new XML( context );						xml..*.( hasOwnProperty( getAttributeName( ContextAttributeList.ID ) ) && @[ContextAttributeList.ID] == id ).property.( @[ContextAttributeList.NAME] == name ).@[ContextAttributeList.VALUE] = value.toString( );								return xml;		}				public static function changeMethodArgumentValue(  context : *, id : String, name : String, index : uint, value : Object = null, type : String = null ) : XML		{			var xml : XML = ( context is XML ) ? context as XML : new XML( context );						var argList : XMLList = xml..*.( hasOwnProperty( getAttributeName( ContextAttributeList.ID ) ) && @[ContextAttributeList.ID] == id )[ContextNameList.METHOD_CALL].( @[ContextAttributeList.NAME] == name ).children( );									if( index < argList.length() )			{				var node : XML = argList[ index ];				var bypassType : Boolean = false;								if( value != null )				{					if( node.attribute( ContextAttributeList.REF ).length() > 0 )					{						bypassType = true;						node.@[ContextAttributeList.REF] = value.toString( );					}					else node.@[ContextAttributeList.VALUE] = value.toString( );				}								if( type != null && !bypassType )				{					node.@[ContextAttributeList.TYPE] = type.toString( );					}			}			else			{				PalmerDebug.ERROR( "Bad argument index = " + index + "/" + argList.length() );			}						return xml;		}				public static function addDLL( context : *, url : String ) : String		{			var xml : XML = ( context is XML ) ? context as XML : new XML( context );						var dll : XML = <{ContextNameList.DLL} />;			dll.@[ContextAttributeList.URL] = url;						xml.appendChild( dll );						return xml;		}				public static function addResource( context : *, id : String, url : String ) : String		{			var xml : XML = ( context is XML ) ? context as XML : new XML( context );						var rsc : XML = <{ContextNameList.RSC} />;
			rsc.@[ContextAttributeList.ID] = id;			rsc.@[ContextAttributeList.URL] = url;						xml.appendChild( rsc );						return xml;		}				/**		 * Adds a new import definition.		 * 		 * @param	xml			XML content ( the context )		 * @param	id			Import identifier		 * @param	url			Import url		 * @param	rootRef		Display tree reference		 */		public static function addImport( context : *, url : String, rootRef : String = null ) : String		{			var xml : XML = ( context is XML ) ? context as XML : new XML( context );						var inc : XML = <{ContextNameList.IMPORT} />;			inc.@[ContextAttributeList.URL] = url;			if( rootRef != null ) inc.@[ContextAttributeList.ROOT_REF] = rootRef;						xml.appendChild( inc );						return xml;		}				public static function addNode( context : *, node: XML ) : XML		{			var xml : XML = ( context is XML ) ? context as XML : new XML( context );			xml.appendChild( node );						return xml;		}						//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------				private static function getAttributeName( name : String ) : String		{			return "@" + name;				}				/**		 * @private		 */		function ProcessingHelper( access : ConstructorAccess )		{			if ( !(access is ConstructorAccess) ) throw new PrivateConstructorException( );		}	}}internal class ConstructorAccess {	}