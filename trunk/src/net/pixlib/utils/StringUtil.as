/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */	 package net.pixlib.utils {	/**	 * The StringUtil utility class is an all-static class with methods for 	 * working with String objects.	 * 	 * @author Romain Ecarnot	 */	final public class StringUtil 	{		//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Removes all white-space characters (a space, tab, newline, or 		 * return character).		 * 		 * @param	source	source string		 */		public static function trim( source : String ) : String		{			if ( source != null && source.length > 0 ) return leftTrim( rightTrim( source ) );			else return source;		}				/**		 * Removes all white-space characters (a space, tab, newline, or 		 * return character) from the left of <code>source</code>.		 * 		 * @param	source	source string		 */		public static function leftTrim( source : String ) : String		{			if ( source != null && source.length > 0 )  return source.replace( /^(\s)*/m, "" );			else return source;		}		/**		 * Removes all white-space characters (a space, tab, newline, or 		 * return character) from the right of <code>source</code>.		 * 		 * @param	source	source string		 */		public static function rightTrim( source : String ) : String		{			if ( source != null && source.length > 0 ) return source.replace( /(\s)*$/, "" );			else return source;		}		/**		 * Removes all white-space characters (a space, tab, newline, or 		 * return character) of each element in an Array, where the Array is 		 * stored as a String.		 * 		 * @param	sourc		source string		 * @param	delimiter	delimiter for each element in array		 */		public function trimArray( source : String, delimiter : String ) : String		{			if ( source != null && source.length > 0 )			{				var a : Array = source.split( delimiter );				var l : int = a.length;								for (var i : int = 0; i < l ; i++) a[i] = trim( a[i] );    			        					if (l > 0) source = a.join( delimiter );			}        				return source;		}						/**		 * Substitutes "{n}" tokens within the specified string with 		 * their respective arguments passed in.		 * 		 * @param	source	string to parse		 * @param	rest	to use for substitution.		 */		public static function substitute( source : String, ...rest ) : String		{			if ( source != null && source.length > 0 )			{				var args : Array;				var l : int = rest.length;								if( l == 1 && rest[0] is Array )				{					args = rest[0] as Array;					l = args.length;				}				else args = rest;								for( var i : int = 0; i < l ; i += 1 )				{					source = source.replace( new RegExp( "\\{" + i + "\\}", "g" ), args[i] );				}			}						return source;		}		/**		 * Capitalizes the first letter of passed-in 		 * <code>source</code> string.		 */		public static function uppercaseFirst( source : String ) : String		{			if ( source != null && source.length > 0 )			{				return source.charAt( 0 ).toUpperCase( ) + source.substr( 1 );			}			else return source;		}		/**		 * Capitalizes the first character of every word in 		 * the passed-in <code>source</code>.		 */		public static function uppercaseWords( source : String ) : String		{			if ( source != null && source.length > 0 )			{				var chars : Array = source.split( " " );				var l : Number = chars.length;								for ( var i : Number = 0; i < l ; i++ )				{					chars[i] = uppercaseFirst( chars[i] );				}				return chars.join( " " );			}						return source;		}		/**		 * Multiply passed-in <code>source</code>, <code>n</code> times.		 */		public static function multiply( source : String,  n : uint = 1) : String		{			var ret : String = "";			for( var i : Number = 0; i < n ; i++ ) ret += source;			return ret;		}		/**		 * Returns <code>true</code> if  passed-in <code>source</code> 		 * starts with passed-in <code>search</code> string.		 * 		 * @param	source	string to evaluate		 * @param	search	search string		 */		public static function beginsWith( source : String, search : String ) : Boolean		{			if ( source != null && source.length > 0 )			{				return ( source.indexOf( search ) == 0 );			}						return false;		}		/**		 * Returns <code>true</code> if passed-in <code>source</code> ends 		 * with passed-in <code>search</code> string.		 *		 * @param	source	string to evaluate		 * @param	search	search string		 */		public static function endsWith( source : String, search : String ) : Boolean		{			if ( source != null && source.length > 0 )			{				return ( source.lastIndexOf( search ) == ( source.length - search.length ) );			}						return false;		}		/**		 * 		 */		public static function getExtension( path : String ) : String		{			var reg : RegExp = new RegExp( "(.*?)(\.[^.]*$|$)", "" );			var ext : String = reg.exec( path )[2];						if( ext != null && ext.length > 0 ) return ext.substring( 1 );			return ext;		}				/**		 * 		 */		public static function removeExtension( path : String ) : String		{			var slash : int = path.lastIndexOf( "/" );			if( slash > -1 ) path = path.substr( slash + 1 );						var reg : RegExp = new RegExp( "(.*?)(\.[^.]*$|$)", "" );			return reg.exec( path )[1];		}		/**		 * 		 */		public static function formatNumber( source : Number, length : uint, char : String = "0", right : Boolean = false ) : String		{			var diff : int = length - source.toString( ).length;			var rest : String = "";						if( diff > 0 )			{				for( var i : uint = 0; i < diff ; i++ ) rest += char;			}			return ( right ) ? source + rest : rest + source;		}		//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------						/**		 * @private		 */		function StringUtil(  ) 		{ 			}	}}