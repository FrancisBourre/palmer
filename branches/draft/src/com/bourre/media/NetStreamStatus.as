/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.bourre.media {	/**	 * NetStream status constants.	 * 	 * @author Romain Ecarnot	 */	public final class NetStreamStatus 	{		//--------------------------------------------------------------------		// Constants		//--------------------------------------------------------------------				/**		 * Data is not being received quickly enough to fill the buffer. 		 * Data flow will be interrupted until the buffer refills, at 		 * which time a NetStream.Buffer.Full message will be sent and 		 * the stream will begin playing again.		 */		public static const BUFFER_EMPTY : String = "NetStream.Buffer.Empty";				/**		 * The buffer is full and the stream will begin playing.		 */		public static const BUFFER_FULL : String = "NetStream.Buffer.Full";				/**		 * Data has finished streaming, and the remaining buffer will be 		 * emptied.		 */		public static const BUFFER_FLUSH : String = "NetStream.Buffer.Flush";				/**		 * Flash Media Server only. An error has occurred for a reason other 		 * than those listed in other event codes.		 */		public static const FAILED : String = "NetStream.Failed";				/**		 * Playback has started.		 */		public static const PLAY_START : String = "NetStream.Play.Start";				/**		 * Playback has stopped.		 */		public static const PLAY_STOP : String = "NetStream.Play.Stop";				/**		 * An error has occurred in playback for a reason other than those 		 * listed elsewhere in this table, such as the subscriber not 		 * having read access.		 */		public static const PLAY_FAILED : String = "NetStream.Play.Failed";				/**		 * The media passed to the play() method can't be found.		 */		public static const PLAY_NOTFOUND : String = "NetStream.Play.StreamNotFound";				/**		 * Caused by a play list reset.		 */		public static const PLAY_RESET : String = "NetStream.Play.Reset";				/**		 * The seek operation is complete.		 */		public static const SEEK_NOTIFY : String = "NetStream.Seek.Notify";				/**		 * For video downloaded with progressive download, the user has tried 		 * to seek or play past the end of the video data that has downloaded 		 * thus far, or past the end of the video once the entire file has 		 * downloaded.		 */		public static const SEEK_INVALIDTIME : String = "NetStream.Seek.InvalidTime";							//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------						/**		 * @private		 */		function NetStreamStatus(  ) { 	}	}}