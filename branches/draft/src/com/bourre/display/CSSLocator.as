/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.bourre.display {	import com.bourre.core.AbstractLocator;	import com.bourre.exceptions.PrivateConstructorException;	/**	 * The <code>CSS</code> locator.	 * 	 * @author Romain Ecarnot	 */	final public class CSSLocator extends AbstractLocator	{		//--------------------------------------------------------------------		// Private properties		//--------------------------------------------------------------------				private static  var _oI : CSSLocator ;						//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Returns singleton instance of <code>CSSLocator</code> class.		 * 		 * @return The singleton instance of <code>CSSLocator</code> class.		 */			public static function getInstance() : CSSLocator		{			if ( !(CSSLocator._oI is CSSLocator) ) CSSLocator._oI = new CSSLocator( ConstructorAccess.instance );			return CSSLocator._oI;		}				/**		 * Releases singleton instance.		 */		public static function release() : void		{			if ( CSSLocator._oI is CSSLocator ) CSSLocator._oI = null;		}		/**		 * Returns CSS object registered with passed-in <code>name</code>.		 */		public function getCSS( name : String ) : CSS		{			return locate( name ) as CSS;		}				//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------							/**		 * @private		 */		function CSSLocator( access : ConstructorAccess )		{			super( CSS, null, null );						if ( !(access is ConstructorAccess) ) throw new PrivateConstructorException( );		}	}}internal class ConstructorAccess {	static public const instance : ConstructorAccess = new ConstructorAccess( );}